["PackageDef(Ident(<empty>),List(ValDef(Thing,Ident(Thing$),Apply(Select(New(Ident(Thing$)),<init>),List())), TypeDef(Thing$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(Thing)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object Thing)))))), ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)],Apply(Apply(Select(Apply(TypeApply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class example)),class LoggingInterceptor)]),<init>),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)])),List(Apply(Ident(example),List(Literal(Constant(test)))))),apply),List(Literal(Constant(example)))),List(Typed(JavaSeqLiteral(List(Literal(Constant(test))), TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))]))))))), ValDef(compileFromStringpackage,Ident(compileFromStringpackage$),Apply(Select(New(Ident(compileFromStringpackage$)),<init>),List())), TypeDef(compileFromStringpackage$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromStringpackage)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromStringpackage)))))), DefDef(example,List(List(ValDef(s,Ident(String),EmptyTree))),Ident(String),Ident(s)))))))","package <empty> {\n  final lazy module val Thing: Thing = new Thing()\n  @SourceFile(\"compileFromStringscala\") final module class Thing() extends Object() { this: Thing.type =>\n    private def writeReplace(): AnyRef = new scala.runtime.ModuleSerializationProxy(classOf[Thing.type])\n    val x: String = new example.LoggingInterceptor[String](example(\"test\")).apply(\"example\")([\"test\" : Any]*)\n  }\n  final lazy module val compileFromStringpackage: \n    compileFromStringpackage\n   = new compileFromStringpackage()\n  @SourceFile(\"compileFromStringscala\") final module class \n    compileFromStringpackage\n  () extends Object() { this: compileFromStringpackage.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromStringpackage.type])\n    def example(s: String): String = s\n  }\n}","Context(\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = ImportSelector(Ident(any2stringadd),Ident(_),EmptyTree), ImportSelector(Ident(_),EmptyTree,EmptyTree), ImportSelector(Ident(),EmptyTree,EmptyTree), implicits = (implicits: (wrapCharArray : (xs: Array[Char]): scala.collection.mutable.ArraySeq.ofChar), (tuple3ToZippedOps : [T1, T2, T3](x: (T1, T2, T3)): runtime.Tuple3Zipped.Ops[T1, T2, T3]), (copyArrayToImmutableIndexedSeq : [T](xs: Array[T]): IndexedSeq[T]), (wrapUnitArray : (xs: Array[Unit]): scala.collection.mutable.ArraySeq.ofUnit), (tuple2ToZippedOps : [T1, T2](x: (T1, T2)): runtime.Tuple2Zipped.Ops[T1, T2]), (char2Character : (x: Char): Character), (long2Long : (x: Long): Long), (ArrowAssoc : [A](self: A): ArrowAssoc[A]), (Integer2int : (x: Integer): Int), (Float2float : (x: Float): Float), (wrapShortArray : (xs: Array[Short]): scala.collection.mutable.ArraySeq.ofShort), (augmentString : (x: String): scala.collection.StringOps), (wrapByteArray : (xs: Array[Byte]): scala.collection.mutable.ArraySeq.ofByte), (wrapBooleanArray : (xs: Array[Boolean]): scala.collection.mutable.ArraySeq.ofBoolean), (charWrapper : (c: Char): scala.runtime.RichChar), (doubleArrayOps : (xs: Array[Double]): scala.collection.ArrayOps[Double]), (intArrayOps : (xs: Array[Int]): scala.collection.ArrayOps[Int]), (byteArrayOps : (xs: Array[Byte]): scala.collection.ArrayOps[Byte]), (Boolean2boolean : (x: Boolean): Boolean), (genericArrayOps : [T](xs: Array[T]): scala.collection.ArrayOps[T]), (charArrayOps : (xs: Array[Char]): scala.collection.ArrayOps[Char]), (genericWrapArray : [T](xs: Array[T]): scala.collection.mutable.ArraySeq[T]), (shortWrapper : (x: Short): scala.runtime.RichShort), (wrapFloatArray : (xs: Array[Float]): scala.collection.mutable.ArraySeq.ofFloat), (Double2double : (x: Double): Double), (wrapRefArray : [T <: AnyRef](xs: Array[T]): scala.collection.mutable.ArraySeq.ofRef[T]), (longWrapper : (x: Long): scala.runtime.RichLong), (Ensuring : [A](self: A): Ensuring[A]), (unitArrayOps : (xs: Array[Unit]): scala.collection.ArrayOps[Unit]), (wrapIntArray : (xs: Array[Int]): scala.collection.mutable.ArraySeq.ofInt), (Character2char : (x: Character): Char), (StringFormat : [A](self: A): StringFormat[A]), (floatArrayOps : (xs: Array[Float]): scala.collection.ArrayOps[Float]), (short2Short : (x: Short): Short), (longArrayOps : (xs: Array[Long]): scala.collection.ArrayOps[Long]), (double2Double : (x: Double): Double), (booleanArrayOps : (xs: Array[Boolean]): scala.collection.ArrayOps[Boolean]), (Long2long : (x: Long): Long), (float2Float : (x: Float): Float), (intWrapper : (x: Int): scala.runtime.RichInt), (doubleWrapper : (x: Double): scala.runtime.RichDouble), (floatWrapper : (x: Float): scala.runtime.RichFloat), (int2Integer : (x: Int): Integer), (shortArrayOps : (xs: Array[Short]): scala.collection.ArrayOps[Short]), (wrapString : (s: String): scala.collection.immutable.WrappedString), (Byte2byte : (x: Byte): Byte), (boolean2Boolean : (x: Boolean): Boolean), (wrapLongArray : (xs: Array[Long]): scala.collection.mutable.ArraySeq.ofLong), (byteWrapper : (x: Byte): scala.runtime.RichByte), (Short2short : (x: Short): Short), (byte2Byte : (x: Byte): Byte), (wrapDoubleArray : (xs: Array[Double]): scala.collection.mutable.ArraySeq.ofDouble), (booleanWrapper : (x: Boolean): scala.runtime.RichBoolean), (refArrayOps : [T <: AnyRef](xs: Array[T]): scala.collection.ArrayOps[T]), ($conforms : [A]: A => A))\n\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = ImportSelector(Ident(_),EmptyTree,EmptyTree), ImportSelector(Ident(),EmptyTree,EmptyTree)\n\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = ImportSelector(Ident(_),EmptyTree,EmptyTree), ImportSelector(Ident(),EmptyTree,EmptyTree)\n\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = \n\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = \n\n  owner = module class <root>, scope = dotty.tools.dotc.core.Scopes$MutableScope@9ee051d, import = \n\n  owner = val <none>, scope = dotty.tools.dotc.core.Scopes$MutableScope@208eeb62, import = \n\n  owner = val <none>, scope = dotty.tools.dotc.core.Scopes$EmptyScope$@676ae476, import = \n\n  owner = val <none>, scope = dotty.tools.dotc.core.Scopes$EmptyScope$@676ae476, import = )"]
